/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DepositorCoin, DepositorCoinInterface } from "../DepositorCoin";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Apporval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040518060400160405280600d81526020017f4465706f7369746f72436f696e000000000000000000000000000000000000008152506040518060400160405280600381526020017f445043000000000000000000000000000000000000000000000000000000000081525081600190816200008f919062000365565b508060029081620000a1919062000365565b50505033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200044c565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200016d57607f821691505b60208210810362000183576200018262000125565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001ed7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620001ae565b620001f98683620001ae565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000246620002406200023a8462000211565b6200021b565b62000211565b9050919050565b6000819050919050565b620002628362000225565b6200027a62000271826200024d565b848454620001bb565b825550505050565b600090565b6200029162000282565b6200029e81848462000257565b505050565b5b81811015620002c657620002ba60008262000287565b600181019050620002a4565b5050565b601f8211156200031557620002df8162000189565b620002ea846200019e565b81016020851015620002fa578190505b6200031262000309856200019e565b830182620002a3565b50505b505050565b600082821c905092915050565b60006200033a600019846008026200031a565b1980831691505092915050565b600062000355838362000327565b9150826002028217905092915050565b6200037082620000eb565b67ffffffffffffffff8111156200038c576200038b620000f6565b5b62000398825462000154565b620003a5828285620002ca565b600060209050601f831160018114620003dd5760008415620003c8578287015190505b620003d4858262000347565b86555062000444565b601f198416620003ed8662000189565b60005b828110156200041757848901518255600182019150602085019450602081019050620003f0565b8683101562000437578489015162000433601f89168262000327565b8355505b6001600288020188555050505b505050505050565b61147a806200045c6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a082311461018f5780638da5cb5b146101bf57806395d89b41146101dd5780639dc29fac146101fb578063a9059cbb14610217578063dd62ed3e14610247576100b4565b806306fdde03146100b9578063095ea7b3146100d757806318160ddd1461010757806323b872dd14610125578063313ce5671461015557806340c10f1914610173575b600080fd5b6100c1610277565b6040516100ce9190610db5565b60405180910390f35b6100f160048036038101906100ec9190610e70565b610305565b6040516100fe9190610ecb565b60405180910390f35b61010f610465565b60405161011c9190610ef5565b60405180910390f35b61013f600480360381019061013a9190610f10565b61046b565b60405161014c9190610ecb565b60405180910390f35b61015d610636565b60405161016a9190610f7f565b60405180910390f35b61018d60048036038101906101889190610e70565b61063f565b005b6101a960048036038101906101a49190610f9a565b6106dd565b6040516101b69190610ef5565b60405180910390f35b6101c76106f5565b6040516101d49190610fd6565b60405180910390f35b6101e561071b565b6040516101f29190610db5565b60405180910390f35b61021560048036038101906102109190610e70565b6107a9565b005b610231600480360381019061022c9190610e70565b610847565b60405161023e9190610ecb565b60405180910390f35b610261600480360381019061025c9190610ff1565b61085c565b60405161026e9190610ef5565b60405180910390f35b6001805461028490611060565b80601f01602080910402602001604051908101604052809291908181526020018280546102b090611060565b80156102fd5780601f106102d2576101008083540402835291602001916102fd565b820191906000526020600020905b8154815290600101906020018083116102e057829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036c90611103565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fa575fc1524e852e4b05c8f456574378380845fc1f2afe2a92b494797f250b6a5846040516104539190610ef5565b60405180910390a36001905092915050565b60005481565b600080600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610530576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052790611195565b60405180910390fd5b828161053c91906111e4565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fa575fc1524e852e4b05c8f456574378380845fc1f2afe2a92b494797f250b6a5856040516106199190610ef5565b60405180910390a361062c858585610881565b9150509392505050565b60006012905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c690611264565b60405180910390fd5b6106d98282610a8e565b5050565b60036020528060005260406000206000915090505481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002805461072890611060565b80601f016020809104026020016040519081016040528092919081815260200182805461075490611060565b80156107a15780601f10610776576101008083540402835291602001916107a1565b820191906000526020600020905b81548152906001019060200180831161078457829003601f168201915b505050505081565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610839576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610830906112d0565b60405180910390fd5b6108438282610bd5565b5050565b6000610854338484610881565b905092915050565b6004602052816000526040600020602052806000526040600020600091509150505481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e890611103565b60405180910390fd5b6000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610978576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096f90611362565b60405180910390fd5b828161098491906111e4565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a169190611382565b925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85604051610a7a9190610ef5565b60405180910390a360019150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610afd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af490611103565b60405180910390fd5b80600080828254610b0e9190611382565b9250508190555080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b649190611382565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610bc99190610ef5565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b90611424565b60405180910390fd5b80600080828254610c5591906111e4565b9250508190555080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610cab91906111e4565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610d109190610ef5565b60405180910390a35050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d56578082015181840152602081019050610d3b565b83811115610d65576000848401525b50505050565b6000601f19601f8301169050919050565b6000610d8782610d1c565b610d918185610d27565b9350610da1818560208601610d38565b610daa81610d6b565b840191505092915050565b60006020820190508181036000830152610dcf8184610d7c565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e0782610ddc565b9050919050565b610e1781610dfc565b8114610e2257600080fd5b50565b600081359050610e3481610e0e565b92915050565b6000819050919050565b610e4d81610e3a565b8114610e5857600080fd5b50565b600081359050610e6a81610e44565b92915050565b60008060408385031215610e8757610e86610dd7565b5b6000610e9585828601610e25565b9250506020610ea685828601610e5b565b9150509250929050565b60008115159050919050565b610ec581610eb0565b82525050565b6000602082019050610ee06000830184610ebc565b92915050565b610eef81610e3a565b82525050565b6000602082019050610f0a6000830184610ee6565b92915050565b600080600060608486031215610f2957610f28610dd7565b5b6000610f3786828701610e25565b9350506020610f4886828701610e25565b9250506040610f5986828701610e5b565b9150509250925092565b600060ff82169050919050565b610f7981610f63565b82525050565b6000602082019050610f946000830184610f70565b92915050565b600060208284031215610fb057610faf610dd7565b5b6000610fbe84828501610e25565b91505092915050565b610fd081610dfc565b82525050565b6000602082019050610feb6000830184610fc7565b92915050565b6000806040838503121561100857611007610dd7565b5b600061101685828601610e25565b925050602061102785828601610e25565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061107857607f821691505b60208210810361108b5761108a611031565b5b50919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006110ed602383610d27565b91506110f882611091565b604082019050919050565b6000602082019050818103600083015261111c816110e0565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b600061117f602883610d27565b915061118a82611123565b604082019050919050565b600060208201905081810360008301526111ae81611172565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111ef82610e3a565b91506111fa83610e3a565b92508282101561120d5761120c6111b5565b5b828203905092915050565b7f4450433a204f6e6c79206f776e65722063616e206d696e740000000000000000600082015250565b600061124e601883610d27565b915061125982611218565b602082019050919050565b6000602082019050818103600083015261127d81611241565b9050919050565b7f4450433a204f6e6c79206f776e65722063616e206275726e0000000000000000600082015250565b60006112ba601883610d27565b91506112c582611284565b602082019050919050565b600060208201905081810360008301526112e9816112ad565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061134c602683610d27565b9150611357826112f0565b604082019050919050565b6000602082019050818103600083015261137b8161133f565b9050919050565b600061138d82610e3a565b915061139883610e3a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156113cd576113cc6111b5565b5b828201905092915050565b7f45524332303a206275726e20746f20746865207a65726f206164647265737300600082015250565b600061140e601f83610d27565b9150611419826113d8565b602082019050919050565b6000602082019050818103600083015261143d81611401565b905091905056fea26469706673582212206004d8e8d1a7786b0048b0bffa8ebcbb54ebb1ef2783c278d017ec6285aaadb664736f6c634300080f0033";

export class DepositorCoin__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DepositorCoin> {
    return super.deploy(overrides || {}) as Promise<DepositorCoin>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DepositorCoin {
    return super.attach(address) as DepositorCoin;
  }
  connect(signer: Signer): DepositorCoin__factory {
    return super.connect(signer) as DepositorCoin__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DepositorCoinInterface {
    return new utils.Interface(_abi) as DepositorCoinInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DepositorCoin {
    return new Contract(address, _abi, signerOrProvider) as DepositorCoin;
  }
}
